services:
  # The application service - VS Code attaches here
  app:
    # Builds the image based on instructions in devcontainer.json (features, etc.)
    # The 'build' context points to the parent directory where .devcontainer is located
    build:
      context: .. # The 'build' context points to the parent directory where .devcontainer is located
      dockerfile: .devcontainer/Dockerfile
    volumes:
      # Mount the entire repository root into /chronos
      - ../:/chronos:cached
    command: sleep infinity # Keep the container running indefinitely
    environment:
      # Pass environment variables from devcontainer.json/Codespace Secrets
      # These will be accessible within the 'app' container
      - DATABASE_URL=${DATABASE_URL} # Example from devcontainer.json's remoteEnv
      # - IMAGE_GEN_API_KEY=${IMAGE_GEN_API_KEY}
      # - LLM_API_KEY=${LLM_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - app-network
    # Make the 'db' service available to the 'app' service
    depends_on:
      db: # Changed from a simple list to an object
        condition: service_healthy # Wait for db to be healthy before starting app

  # The PostgreSQL database service
  db:
    image: postgres:15 # Use a specific PostgreSQL version (e.g., 15)
    restart: unless-stopped
    hostname: db # Explicitly set hostname, useful for DATABASE_URL
    volumes:
      # Persist database data across Codespace rebuilds/restarts
      - postgres_data:/var/lib/postgresql/data
    environment:
      # --- IMPORTANT: Use GitHub Codespace Secrets for these values ---
      # These should match the credentials used in the DATABASE_URL in devcontainer.json
      POSTGRES_DB: ${POSTGRES_DB:-chronoscraftDB} # Default 'chronoscraftDB' if secret not set
      POSTGRES_USER: ${POSTGRES_USER:-chronosUSR} # Default 'chronosUSR' if secret not set
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chronosPWD} # Default 'chronosPWD' if secret not set
    ports:
      # Map port 5432 inside the container to 5432 on the Codespace host (optional, for external tools)
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chronosUSR} -d ${POSTGRES_DB:-chronoscraftDB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s # Give it time to start before first check

# Define the named volume for data persistence
volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge